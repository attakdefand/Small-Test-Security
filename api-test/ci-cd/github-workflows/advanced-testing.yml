# Advanced CI/CD Workflow for API Testing
name: Advanced API Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        profile: minimal
        override: true

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Check code formatting
      run: |
        cd api-test
        cargo fmt -- --check

    - name: Run cargo check
      run: |
        cd api-test
        cargo check --workspace

    - name: Run unit tests
      run: |
        cd api-test
        cargo test --lib --bins

    - name: Run integration tests
      run: |
        cd api-test
        cargo test --test "*"
      env:
        BASE_URL: http://localhost:8080
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run ignored tests (security)
      run: |
        cd api-test
        timeout 300 cargo test -- --ignored
      env:
        BASE_URL: http://localhost:8080
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cargo-deny
      run: |
        cargo install cargo-deny

    - name: Run cargo-deny
      run: |
        cd api-test
        cargo deny check

  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run k6 load tests
      run: |
        cd api-test
        timeout 300 k6 run k6-tests/basic-load-test.js
      env:
        BASE_URL: http://localhost:8080

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        profile: minimal
        override: true

    - name: Install cargo-tarpaulin
      run: |
        cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: |
        cd api-test
        cargo tarpaulin --out Xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api-test/cobertura.xml
        flags: unittests
        name: codecov-umbrella

  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        profile: minimal
        override: true

    - name: Check documentation
      run: |
        cd api-test
        cargo doc --no-deps

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scanning, performance-testing, code-coverage, documentation-validation]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "ðŸš¨ CI/CD pipeline failed! Check the logs for details."
        # Add your notification logic here (Slack, email, etc.)

    - name: Notify on success
      if: success()
      run: |
        echo "âœ… CI/CD pipeline completed successfully!"
        # Add your notification logic here (Slack, email, etc.)